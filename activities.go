// Code generated by riza; DO NOT EDIT.

package assembled

import (
	"context"
	"encoding/json"
	"fmt"
	"time"
)

// Agents can have scheduled activities that are either created directly in
// Assembled or sourced from other calendaring applications such as Google
// Calendar.
type Activity struct {
	ID string `json:"id,omitempty"`

	// An arbitrary string to be displayed to end users.
	Description string `json:"description,omitempty"`

	AgentID   string    `json:"agent_id,omitempty"` // Identifier for the corresponding agent.
	EndTime   time.Time `json:"end_time,omitempty"`
	StartTime time.Time `json:"start_time,omitempty"`
	TypeID    string    `json:"type_id,omitempty"` // Identifier for the associated activity type.
}

func (r Activity) MarshalJSON() ([]byte, error) {
	type Alias Activity
	return json.Marshal(&struct {
		Alias
		EndTime   int64 `json:"end_time,omitempty"`
		StartTime int64 `json:"start_time,omitempty"`
	}{
		Alias:     (Alias)(r),
		EndTime:   timestamp(r.EndTime),
		StartTime: timestamp(r.StartTime),
	})
}

func (r *Activity) UnmarshalJSON(b []byte) error {
	type Alias Activity
	var a struct {
		Alias
		EndTime   int64 `json:"end_time,omitempty"`
		StartTime int64 `json:"start_time,omitempty"`
	}
	err := json.Unmarshal(b, &a)
	if err != nil {
		return err
	}
	*r = Activity(a.Alias)
	r.EndTime = time.Unix(a.EndTime, 0)
	r.StartTime = time.Unix(a.StartTime, 0)
	return nil
}

type ActivityRequest struct {
	// One of create, update, or delete. Note that update and delete are
	// currently in beta. Contact us at support@assembled.com to be notified
	// of updates.
	Action string `json:"action,omitempty"`

	// Agents can have scheduled activities that are either created directly
	// in Assembled or sourced from other calendaring applications such as
	// Google Calendar.
	Activity Activity `json:"activity,omitempty"`
}

// Agents handle units of work and can be assigned to activities or schedules.
// They can be grouped by site and team and can be assigned to queues or
// channels based on their skills.
type Agent struct {
	ID string `json:"id,omitempty"`

	// Third-party identifier. Supplied to Assembled and is used to uniquely
	// identify agents across different systems.
	ImportID string `json:"import_id,omitempty"`

	Channels []string `json:"channels,omitempty"` // One of: 'phone', 'email', or 'chat'.
	Email    string   `json:"email,omitempty"`
	Name     string   `json:"name,omitempty"`
	Queues   []string `json:"queues,omitempty"` // Unique identifiers for associated queues.
	Site     string   `json:"site,omitempty"`   // Unique identifier for associated site.
	Skills   []string `json:"skills,omitempty"` // Unique identifiers for associated skills.
	Teams    []string `json:"teams,omitempty"`  // Unique identifiers for associated teams.
}

type CreateActivityRequest struct {
	// Whether or not to allow conflicting events. If true, this created
	// activity will be allowed to have conflicts with other activities. If
	// false, any overlapping activities for the specified agent will be
	// deleted. Defaults to false.
	AllowConflicts bool `json:"allow_conflicts,omitempty"`

	// An arbitrary string to be displayed to end users.
	Description string `json:"description,omitempty"`

	// Identifier for the corresponding schedule. Defaults to the master
	// schedule.
	ScheduleID string `json:"schedule_id,omitempty"`

	AgentID   string    `json:"agent_id,omitempty"` // Unique identifier for an agent.
	EndTime   time.Time `json:"end_time,omitempty"`
	StartTime time.Time `json:"start_time,omitempty"`
	TypeID    string    `json:"type_id,omitempty"` // Unique identifier for an activity type.
}

func (r CreateActivityRequest) MarshalJSON() ([]byte, error) {
	type Alias CreateActivityRequest
	return json.Marshal(&struct {
		Alias
		EndTime   int64 `json:"end_time,omitempty"`
		StartTime int64 `json:"start_time,omitempty"`
	}{
		Alias:     (Alias)(r),
		EndTime:   timestamp(r.EndTime),
		StartTime: timestamp(r.StartTime),
	})
}

func (r *CreateActivityRequest) UnmarshalJSON(b []byte) error {
	type Alias CreateActivityRequest
	var a struct {
		Alias
		EndTime   int64 `json:"end_time,omitempty"`
		StartTime int64 `json:"start_time,omitempty"`
	}
	err := json.Unmarshal(b, &a)
	if err != nil {
		return err
	}
	*r = CreateActivityRequest(a.Alias)
	r.EndTime = time.Unix(a.EndTime, 0)
	r.StartTime = time.Unix(a.StartTime, 0)
	return nil
}

type CreateBulkActivityRequest struct {
	// An array of requests following the format below.
	Activities []ActivityRequest `json:"activities,omitempty"`

	// Identifier for the corresponding schedule. Defaults to the master
	// schedule.
	ScheduleID string `json:"schedule_id,omitempty"`
}

type CreateBulkActivityResponse struct {
	Activities map[string]Activity `json:"activities,omitempty"`
}

type DeleteActivitiesRequest struct {
	// Unique identifiers for agents. All activities in the deletion window
	// will be deleted for each specified agent.
	AgentIDs []string `json:"agent_ids,omitempty"`

	// Identifier for the corresponding schedule. Defaults to the master
	// schedule.
	ScheduleID string `json:"schedule_id,omitempty"`

	EndTime   time.Time `json:"end_time,omitempty"`
	StartTime time.Time `json:"start_time,omitempty"`
}

func (r DeleteActivitiesRequest) MarshalJSON() ([]byte, error) {
	type Alias DeleteActivitiesRequest
	return json.Marshal(&struct {
		Alias
		EndTime   int64 `json:"end_time,omitempty"`
		StartTime int64 `json:"start_time,omitempty"`
	}{
		Alias:     (Alias)(r),
		EndTime:   timestamp(r.EndTime),
		StartTime: timestamp(r.StartTime),
	})
}

func (r *DeleteActivitiesRequest) UnmarshalJSON(b []byte) error {
	type Alias DeleteActivitiesRequest
	var a struct {
		Alias
		EndTime   int64 `json:"end_time,omitempty"`
		StartTime int64 `json:"start_time,omitempty"`
	}
	err := json.Unmarshal(b, &a)
	if err != nil {
		return err
	}
	*r = DeleteActivitiesRequest(a.Alias)
	r.EndTime = time.Unix(a.EndTime, 0)
	r.StartTime = time.Unix(a.StartTime, 0)
	return nil
}

type ListActivitiesRequest struct {
	// If true, include activity types active on the account. Defaults to
	// false.
	IncludeActivityTypes bool `json:"include_activity_types,omitempty"`

	// If true, include associated agent objects. Defaults to false.
	IncludeAgents bool `json:"include_agents,omitempty"`

	// Identifier for the corresponding schedule. Defaults to the master
	// schedule.
	ScheduleID string `json:"schedule_id,omitempty"`

	Agents    []string  `json:"agents,omitempty"`  // Filter results to a specific set of agents.
	Channel   string    `json:"channel,omitempty"` // Filter results to a specific channel.
	EndTime   time.Time `json:"end_time,omitempty"`
	StartTime time.Time `json:"start_time,omitempty"`
	Team      string    `json:"team,omitempty"`  // Filter results to a specific team.
	Types     []string  `json:"types,omitempty"` // Filter results to a specific set of types.
}

func (r ListActivitiesRequest) MarshalJSON() ([]byte, error) {
	type Alias ListActivitiesRequest
	return json.Marshal(&struct {
		Alias
		EndTime   int64 `json:"end_time,omitempty"`
		StartTime int64 `json:"start_time,omitempty"`
	}{
		Alias:     (Alias)(r),
		EndTime:   timestamp(r.EndTime),
		StartTime: timestamp(r.StartTime),
	})
}

func (r *ListActivitiesRequest) UnmarshalJSON(b []byte) error {
	type Alias ListActivitiesRequest
	var a struct {
		Alias
		EndTime   int64 `json:"end_time,omitempty"`
		StartTime int64 `json:"start_time,omitempty"`
	}
	err := json.Unmarshal(b, &a)
	if err != nil {
		return err
	}
	*r = ListActivitiesRequest(a.Alias)
	r.EndTime = time.Unix(a.EndTime, 0)
	r.StartTime = time.Unix(a.StartTime, 0)
	return nil
}

// Returns ListActivitiesRequest with `url` tags instead of `json` tags for URL encoding.
func (r *ListActivitiesRequest) params() interface{} {
	if r == nil {
		return r
	}
	type params struct {
		IncludeActivityTypes bool      `url:"include_activity_types,omitempty"`
		IncludeAgents        bool      `url:"include_agents,omitempty"`
		ScheduleID           string    `url:"schedule_id,omitempty"`
		Agents               []string  `url:"agents,omitempty"`
		Channel              string    `url:"channel,omitempty"`
		EndTime              time.Time `url:"end_time,omitempty,unix"`
		StartTime            time.Time `url:"start_time,omitempty,unix"`
		Team                 string    `url:"team,omitempty"`
		Types                []string  `url:"types,omitempty"`
	}
	p := params(*r)
	return &p
}

type ListActivitiesResponse struct {
	Activities map[string]Activity `json:"activities,omitempty"`
	Agents     map[string]Agent    `json:"agents,omitempty"`
	Queues     map[string]Queue    `json:"queues,omitempty"`
}

type Queue struct {
	ID   string `json:"id,omitempty"`
	Name string `json:"name,omitempty"`
}

// Creates an activity with the specified parameters. Valid IDs for agents can
// be retrieved from the agent endpoints. Valid IDs for activity types can be
// retrieved from the activity types endpoints. This endpoint will return 400
// if invalid IDs are provided.
func (c *Client) CreateActivity(ctx context.Context, r *CreateActivityRequest) (*Activity, error) {
	var resp Activity
	if err := c.request(ctx, "POST", "/v0/activities", nil, r, &resp); err != nil {
		return nil, fmt.Errorf("CreateActivity: %w", err)
	}
	return &resp, nil
}

// Creates, updates, or deletes multiple activities in a single request. A
// given request occurs within a transaction, so in the event of an error
// during the request, it should be assumed that no changes were processed.
func (c *Client) CreateBulkActivity(ctx context.Context, r *CreateBulkActivityRequest) (*CreateBulkActivityResponse, error) {
	var resp CreateBulkActivityResponse
	if err := c.request(ctx, "POST", "/v0/activities/bulk", nil, r, &resp); err != nil {
		return nil, fmt.Errorf("CreateBulkActivity: %w", err)
	}
	return &resp, nil
}

// Deletes all activities that match the specified parameters. Valid IDs for
// agents can be retrieved from the agent endpoints. This endpoint will return
// 400 if invalid IDs are provided.
//
// Activities can be partially deleted. For example, if agent XYZ has an
// activity from 3pm-5pm and the deletion window is from 4pm-5pm, there will
// still exist a 3-4pm activity for agent XYZ after the deletion is completed.
func (c *Client) DeleteActivities(ctx context.Context, r *DeleteActivitiesRequest) error {
	if err := c.request(ctx, "DELETE", "/v0/activities", nil, r, nil); err != nil {
		return fmt.Errorf("DeleteActivities: %w", err)
	}
	return nil
}

// Returns a list of activity objects that match the provided query.
func (c *Client) ListActivities(ctx context.Context, r *ListActivitiesRequest) (*ListActivitiesResponse, error) {
	var resp ListActivitiesResponse
	if err := c.request(ctx, "GET", "/v0/activities", r.params(), nil, &resp); err != nil {
		return nil, fmt.Errorf("ListActivities: %w", err)
	}
	return &resp, nil
}

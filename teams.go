// Code generated by riza; DO NOT EDIT.

package assembled

import (
	"context"
	"fmt"
)

type CreateTeamRequest struct {
	Teams []Filter `json:"teams,omitempty"`
}

type DeleteTeamsRequest struct {
	TeamIDs []string `json:"team_ids,omitempty"`
}

type TeamsList struct {
	Teams map[string]Filter `json:"teams,omitempty"`
}

type UpdateTeamsRequest struct {
	ID       string `json:"id,omitempty"`
	Name     string `json:"name,omitempty"`
	ParentID string `json:"parent_id,omitempty"`
}

// Returns UpdateTeamsRequest with ID set to the empty string so that it's
// not included in the JSON request body.
func (r *UpdateTeamsRequest) body() interface{} {
	if r == nil {
		return r
	}
	req := *r
	req.ID = ""
	return &req
}

func (c *Client) CreateTeam(ctx context.Context, r *CreateTeamRequest) (*TeamsList, error) {
	var resp TeamsList
	if err := c.request(ctx, "POST", "/v0/teams", nil, r, &resp); err != nil {
		return nil, fmt.Errorf("CreateTeam: %w", err)
	}
	return &resp, nil
}

func (c *Client) DeleteTeams(ctx context.Context, r *DeleteTeamsRequest) error {
	if err := c.request(ctx, "DELETE", "/v0/teams", nil, r, nil); err != nil {
		return fmt.Errorf("DeleteTeams: %w", err)
	}
	return nil
}

func (c *Client) ListTeams(ctx context.Context) (*TeamsList, error) {
	var resp TeamsList
	if err := c.request(ctx, "GET", "/v0/teams", nil, nil, &resp); err != nil {
		return nil, fmt.Errorf("ListTeams: %w", err)
	}
	return &resp, nil
}

func (c *Client) UpdateTeams(ctx context.Context, r *UpdateTeamsRequest) (*Filter, error) {
	var resp Filter
	if err := c.request(ctx, "PUT", fmt.Sprintf("/v0/teams/%s", r.ID), nil, r.body(), &resp); err != nil {
		return nil, fmt.Errorf("UpdateTeams: %w", err)
	}
	return &resp, nil
}

// Code generated by riza; DO NOT EDIT.

package assembled

import (
	"context"
	"encoding/json"
	"fmt"
	"time"
)

type CreateQueueRequest struct {
	Queues []Filter `json:"queues,omitempty"`
}

type DeleteQueuesRequest struct {
	QueueIDs []string `json:"queue_ids,omitempty"`
}

// Filters can be used to categorize or group agents as well as activities.
type Filter struct {
	ID string `json:"id,omitempty"`

	// Identifier for the parent filter. May be null.
	ParentID string `json:"parent_id,omitempty"`

	CreatedAt time.Time `json:"created_at,omitempty"`
	Name      string    `json:"name,omitempty"` // Identifier for the filter.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

func (r Filter) MarshalJSON() ([]byte, error) {
	type Alias Filter
	return json.Marshal(&struct {
		Alias
		CreatedAt int64 `json:"created_at,omitempty"`
		UpdatedAt int64 `json:"updated_at,omitempty"`
	}{
		Alias:     (Alias)(r),
		CreatedAt: timestamp(r.CreatedAt),
		UpdatedAt: timestamp(r.UpdatedAt),
	})
}

func (r *Filter) UnmarshalJSON(b []byte) error {
	type Alias Filter
	var a struct {
		Alias
		CreatedAt int64 `json:"created_at,omitempty"`
		UpdatedAt int64 `json:"updated_at,omitempty"`
	}
	err := json.Unmarshal(b, &a)
	if err != nil {
		return err
	}
	*r = Filter(a.Alias)
	r.CreatedAt = time.Unix(a.CreatedAt, 0)
	r.UpdatedAt = time.Unix(a.UpdatedAt, 0)
	return nil
}

type QueuesList struct {
	Queues map[string]Filter `json:"queues,omitempty"`
}

type UpdateQueuesRequest struct {
	ID       string `json:"id,omitempty"`
	Name     string `json:"name,omitempty"`
	ParentID string `json:"parent_id,omitempty"`
}

// Returns UpdateQueuesRequest with ID set to the empty string so that it's
// not included in the JSON request body.
func (r *UpdateQueuesRequest) body() interface{} {
	if r == nil {
		return r
	}
	req := *r
	req.ID = ""
	return &req
}

func (c *Client) CreateQueue(ctx context.Context, r *CreateQueueRequest) (*QueuesList, error) {
	var resp QueuesList
	if err := c.request(ctx, "POST", "/v0/queues", nil, r, &resp); err != nil {
		return nil, fmt.Errorf("CreateQueue: %w", err)
	}
	return &resp, nil
}

func (c *Client) DeleteQueues(ctx context.Context, r *DeleteQueuesRequest) error {
	if err := c.request(ctx, "DELETE", "/v0/queues", nil, r, nil); err != nil {
		return fmt.Errorf("DeleteQueues: %w", err)
	}
	return nil
}

func (c *Client) ListQueues(ctx context.Context) (*QueuesList, error) {
	var resp QueuesList
	if err := c.request(ctx, "GET", "/v0/queues", nil, nil, &resp); err != nil {
		return nil, fmt.Errorf("ListQueues: %w", err)
	}
	return &resp, nil
}

func (c *Client) UpdateQueues(ctx context.Context, r *UpdateQueuesRequest) (*Filter, error) {
	var resp Filter
	if err := c.request(ctx, "PUT", fmt.Sprintf("/v0/queues/%s", r.ID), nil, r.body(), &resp); err != nil {
		return nil, fmt.Errorf("UpdateQueues: %w", err)
	}
	return &resp, nil
}

// Code generated by riza; DO NOT EDIT.

package assembled

import (
	"context"
	"fmt"
)

type CreateSkillRequest struct {
	Skills []Filter `json:"skills,omitempty"`
}

type DeleteSkillsRequest struct {
	SkillIDs []string `json:"skill_ids,omitempty"`
}

type SkillsList struct {
	Skills map[string]Filter `json:"skills,omitempty"`
}

type UpdateSkillsRequest struct {
	ID       string `json:"id,omitempty"`
	Name     string `json:"name,omitempty"`
	ParentID string `json:"parent_id,omitempty"`
}

// Returns UpdateSkillsRequest with ID set to the empty string so that it's
// not included in the JSON request body.
func (r *UpdateSkillsRequest) body() interface{} {
	if r == nil {
		return r
	}
	req := *r
	req.ID = ""
	return &req
}

func (c *Client) CreateSkill(ctx context.Context, r *CreateSkillRequest) (*SkillsList, error) {
	var resp SkillsList
	if err := c.request(ctx, "POST", "/v0/skills", nil, r, &resp); err != nil {
		return nil, fmt.Errorf("CreateSkill: %w", err)
	}
	return &resp, nil
}

func (c *Client) DeleteSkills(ctx context.Context, r *DeleteSkillsRequest) error {
	if err := c.request(ctx, "DELETE", "/v0/skills", nil, r, nil); err != nil {
		return fmt.Errorf("DeleteSkills: %w", err)
	}
	return nil
}

func (c *Client) ListSkills(ctx context.Context) (*SkillsList, error) {
	var resp SkillsList
	if err := c.request(ctx, "GET", "/v0/skills", nil, nil, &resp); err != nil {
		return nil, fmt.Errorf("ListSkills: %w", err)
	}
	return &resp, nil
}

func (c *Client) UpdateSkills(ctx context.Context, r *UpdateSkillsRequest) (*Filter, error) {
	var resp Filter
	if err := c.request(ctx, "PUT", fmt.Sprintf("/v0/skills/%s", r.ID), nil, r.body(), &resp); err != nil {
		return nil, fmt.Errorf("UpdateSkills: %w", err)
	}
	return &resp, nil
}

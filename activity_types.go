// Code generated by riza; DO NOT EDIT.

package assembled

import (
	"context"
	"fmt"
)

// Activity types represent a categorization of different activities.
// Currently they are only editable via the dashboard.
type ActivityType struct {
	ID string `json:"id,omitempty"`

	// Channels associated with the activity. Must be non-empty when the the
	// activity is productive.
	Channels []string `json:"channels,omitempty"`

	// Corresponds to type in the Activity object, will be deprecated in a
	// future API version.
	Value string `json:"value,omitempty"`

	BackgroundColor string `json:"background_color,omitempty"` // Hex string.
	FontColor       string `json:"font_color,omitempty"`       // Hex string.
	Name            string `json:"name,omitempty"`
	Productive      bool   `json:"productive,omitempty"` // If true, timeoff must be false.
	ShortName       string `json:"short_name,omitempty"`
	Timeoff         bool   `json:"timeoff,omitempty"` // If true, productive must be false.
}

type CreateActivityTypeRequest struct {
	// Channels associated with the activity. Must be non-empty when the the
	// activity is productive.
	Channels []string `json:"channels,omitempty"`

	// Corresponds to type in the Activity object, will be deprecated in a
	// future API version.
	Value string `json:"value,omitempty"`

	BackgroundColor string `json:"background_color,omitempty"` // Hex string.
	FontColor       string `json:"font_color,omitempty"`       // Hex string.
	Name            string `json:"name,omitempty"`
	Productive      bool   `json:"productive,omitempty"` // If true, timeoff must be false.
	ShortName       string `json:"short_name,omitempty"`
	Timeoff         bool   `json:"timeoff,omitempty"` // If true, productive must be false.
}

type DeleteActivityTypeRequest struct {
	ID string `json:"id,omitempty"`
}

// Returns DeleteActivityTypeRequest with ID set to the empty string so that it's
// not included in the JSON request body.
func (r *DeleteActivityTypeRequest) body() interface{} {
	if r == nil {
		return r
	}
	req := *r
	req.ID = ""
	return &req
}

type ListActivityTypesResponse struct {
	ActivityTypes map[string]ActivityType `json:"activity_types,omitempty"`
}

// Creates an activity type.
func (c *Client) CreateActivityType(ctx context.Context, r *CreateActivityTypeRequest) (*ActivityType, error) {
	var resp ActivityType
	if err := c.request(ctx, "POST", "/v0/activity_types", nil, r, &resp); err != nil {
		return nil, fmt.Errorf("CreateActivityType: %w", err)
	}
	return &resp, nil
}

// Deletes an activity type.
func (c *Client) DeleteActivityType(ctx context.Context, r *DeleteActivityTypeRequest) (*ActivityType, error) {
	var resp ActivityType
	if err := c.request(ctx, "DELETE", fmt.Sprintf("/v0/activity_types/%s", r.ID), nil, nil, &resp); err != nil {
		return nil, fmt.Errorf("DeleteActivityType: %w", err)
	}
	return &resp, nil
}

// Returns a list of all activity type objects configured on the account.
func (c *Client) ListActivityTypes(ctx context.Context) (*ListActivityTypesResponse, error) {
	var resp ListActivityTypesResponse
	if err := c.request(ctx, "GET", "/v0/activity_types", nil, nil, &resp); err != nil {
		return nil, fmt.Errorf("ListActivityTypes: %w", err)
	}
	return &resp, nil
}

// Code generated by riza; DO NOT EDIT.

package assembled

import (
	"context"
	"fmt"
)

type CreateSiteRequest struct {
	Sites []Filter `json:"sites,omitempty"`
}

type DeleteSitesRequest struct {
	SiteIDs []string `json:"site_ids,omitempty"`
}

type SitesList struct {
	Sites map[string]Filter `json:"sites,omitempty"`
}

type UpdateSitesRequest struct {
	ID       string `json:"id,omitempty"`
	Name     string `json:"name,omitempty"`
	ParentID string `json:"parent_id,omitempty"`
}

// Returns UpdateSitesRequest with ID set to the empty string so that it's
// not included in the JSON request body.
func (r *UpdateSitesRequest) body() interface{} {
	if r == nil {
		return r
	}
	req := *r
	req.ID = ""
	return &req
}

func (c *Client) CreateSite(ctx context.Context, r *CreateSiteRequest) (*SitesList, error) {
	var resp SitesList
	if err := c.request(ctx, "POST", "/v0/sites", nil, r, &resp); err != nil {
		return nil, fmt.Errorf("CreateSite: %w", err)
	}
	return &resp, nil
}

func (c *Client) DeleteSites(ctx context.Context, r *DeleteSitesRequest) error {
	if err := c.request(ctx, "DELETE", "/v0/sites", nil, r, nil); err != nil {
		return fmt.Errorf("DeleteSites: %w", err)
	}
	return nil
}

func (c *Client) ListSites(ctx context.Context) (*SitesList, error) {
	var resp SitesList
	if err := c.request(ctx, "GET", "/v0/sites", nil, nil, &resp); err != nil {
		return nil, fmt.Errorf("ListSites: %w", err)
	}
	return &resp, nil
}

func (c *Client) UpdateSites(ctx context.Context, r *UpdateSitesRequest) (*Filter, error) {
	var resp Filter
	if err := c.request(ctx, "PUT", fmt.Sprintf("/v0/sites/%s", r.ID), nil, r.body(), &resp); err != nil {
		return nil, fmt.Errorf("UpdateSites: %w", err)
	}
	return &resp, nil
}
